<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>_King&#39;s Notes</title>
  
  
  <link href="https://jin.cloong.me/atom.xml" rel="self"/>
  
  <link href="https://jin.cloong.me/"/>
  <updated>2021-03-04T16:02:19.148Z</updated>
  <id>https://jin.cloong.me/</id>
  
  <author>
    <name>_king</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lua 脚本在 Redis 中的应用</title>
    <link href="https://jin.cloong.me/2021/03/04/lua-in-redis/"/>
    <id>https://jin.cloong.me/2021/03/04/lua-in-redis/</id>
    <published>2021-03-04T15:55:17.000Z</published>
    <updated>2021-03-04T16:02:19.148Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 从 2.6.0 开始便支持执行 Lua 5.1 脚本，使用的命令是 <a href="https://redis.io/commands/eval"><code>EVAL</code></a>。</p><p>基本语法：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">EVAL 脚本代码 键个数 键1 [键2 ...] 参数1 [参数2 ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Lua 脚本中，使用全局数组变量 <code>KEYS</code> 访问键，<code>ARGV</code> 访问参数，这两个变量都是<strong>从数组下标 1 开始</strong>进行访问。另外，如果需要执行 Redis 的指令，可以通过以下两个函数做到：</p><ul><li><code>redis.call()</code></li><li><code>redis.pcall()</code></li></ul><p>前者在执行发生错误时会抛给执行者，而后者不会。</p><p>这个脚本的执行过程是一个<strong>事务操作</strong>，并且是 Redis 中一种更快速和高效的（simpler and faster）事务执行方式，它的效果相当于 <code>MULTI</code> + <code>EXEC</code>。这一特性的存在，让我们可以在一次指令执行中（一次通信）包含一系列可程序化的操作。在一定程度上，可以简化客户端代码及可能存在的并发问题。</p><p>例如，下面脚本实现的功能是对一个 key 进行计数并在首次缓存时设置过期时间，执行返回的结果是当前计数值：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> seconds <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> count <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'incr'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'expire'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> seconds<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这个例子可以看出，Lua 脚本在此时扮演的角色实际上等同于一个“函数”，对这段脚本的执行就相当于在执行一个“函数”，所不同于一般函数的是 Redis 保证其执行具有了原子性。</p><p>但需要注意的是，尽量不要在脚本中执行大量耗时的操作（如 <code>keys *</code>），否则可能会对其他 client 造成一定影响。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://redis.io/commands/eval">Redis Lua scripting</a></li><li><a href="https://redis.io/topics/transactions">Redis transactions</a></li><li><a href="http://www.lua.org/manual/5.1/">Lua 5.1 Reference Manual</a></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Redis" scheme="https://jin.cloong.me/tags/Redis/"/>
    
    <category term="Lua" scheme="https://jin.cloong.me/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>从 C 语言到程序的一般性问题讨论</title>
    <link href="https://jin.cloong.me/2019/05/24/clang-notes/"/>
    <id>https://jin.cloong.me/2019/05/24/clang-notes/</id>
    <published>2019-05-23T16:06:21.000Z</published>
    <updated>2021-03-04T15:53:12.065Z</updated>
    
    <content type="html"><![CDATA[<p>C 是我学的第一门程序语言，也是让我认识和接触计算机、软件开发的开始。至今想来，我的思维有时侯其实存在的最多的还是面向过程的。</p><p>常见的 C 的标准：C89，C90，C99，C11。其中，C89、C90 标准相同，又称 ASCI C；C99 应用最广,我当时学的就是这个标准。</p><p>在这里，我想将后来学习的 C++、C#、Java、JavaScript 统称为“C 系语言”。虽然它们与 C 是如此的不同。</p><h2 id="空指针和函数指针"><a href="#空指针和函数指针" class="headerlink" title="空指针和函数指针"></a>空指针和函数指针</h2><p>空指针 <code>void *</code> 和函数指针的存在是我以前常常忽视的两种特殊的指针。实际上，它们在 C 语言的开发中扮演着极为重要的角色，也与上述提及那些语言存在着极为密切的关系。</p><h3 id="1、空指针"><a href="#1、空指针" class="headerlink" title="1、空指针"></a>1、空指针</h3><p>空指针不代表任何类型，却可以成为任何类型。对它的赋值和转化必须按照相同的类型进行，以保证数据前后的一致性。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>bar <span class="token operator">=</span> foo<span class="token punctuation">;</span><span class="token keyword">int</span> baz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>bar<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也就是说，不一致的转换将在大多数情况下照成数据的缺失。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token number">65540</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>bar <span class="token operator">=</span> foo<span class="token punctuation">;</span><span class="token keyword">short</span> baz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>bar<span class="token punctuation">;</span> <span class="token comment">/* 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是因为在 C 语言中，类型转换是根据类型的大小重新对内存进行规划的（如图 1）。毫无疑问，在其它的语言当中亦是如此（基本值类型）。空指针的大小根据操作系统的位数来决定（包括其它类型的指针），一般是 32 位系统是 4 字节，64 位系统是 8 字节。</p><img src="/2019/05/24/clang-notes/1.png" class="" title="图 1"><p>空指针必须进行类型转换后才能访问。这有点像面向对象语言中的 <code>Object</code> 类型的实例，只有在经过类型转换（如拆箱）后它才会有实际意义。</p><p>另一方面，空指针的存在也让 C 具有了一定的<strong>泛型</strong>或<strong>模板化</strong>编程的可能性。比如，可以利用它写出一个能交换两个任意类型变量值的程序出来。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span> <span class="token comment">/* memcpy */</span></span><span class="token comment">/* size 是对应指针类型的大小(单位: Byte) */</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ap<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> ap<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> bp<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 <code>swap</code> 将可以进行不同类型的变量交换，如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也即是说，利用空指针可以写出适应不同类型的通用模型或数据结构出来。</p><h3 id="2、函数指针"><a href="#2、函数指针" class="headerlink" title="2、函数指针"></a>2、函数指针</h3><p>函数指针可以将某个程序的操作延迟到调用，让程序适应不同的调用场景。这与面向对象语言的<strong>多态</strong>特点类似。</p><p>函数指针扮演的实际上是回调函数的角色。JavaScript 充分发挥了这一特性。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 使用 cmp 控制升序、降序 */</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>cmp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序中，可以在调用该排序函数时，进行具体的 <code>cmp</code> 绑定，从而让该排序函数具有升序和降序的可能性。</p><p>倘若在一个结构体中定义一些系列的通用函数指针，对于不同的使用对象分别给出各自不同的实现，这样就可以实现面向接口化的编程，而这里的结构体又可以类比成一个<strong>接口</strong>。在 UNIX 操作系统中，<code>FILE</code> 这一结构就是这样设计的。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><blockquote><p>作者的机器是 64 位 Linux 系统，Intel x86 架构处理器</p></blockquote><p>内存<a href="https://en.wikipedia.org/wiki/Data_structure_alignment">对齐</a>实际是因为 CPU 的寻址方式所造成的一种对内存分配的优化手段。例如，有些 CPU 每次只能对 4 的倍数的地址进行读取，即每次只能读取 4 字节大小的数据，倘若有数据分布于两段地址区间内，那么 CPU 对该数据的读取将花费 2 次进行（如图 2）。一般而言，经过对齐之后的程序的运行效率高于未作处理的程序。</p><img src="/2019/05/24/clang-notes/2.png" class="" title="图 2"><p>在 C 语言中可以对内存对齐进行控制，特别是在结构体 <code>struct</code> 中进行这种处理是十分常见的。结构体实际上是一些数据的容器。当对结构体进行地址空间的分配时，实际将根据成员变量的类型及定义顺序进行，并按照默认的对齐方式对内存进行大小分配；成员变量定义的顺序不同，分配的大小可能不同。</p><p>一个空的结构体 <code>sizeof</code> 得到的是 <code>0</code>（单位字节，下同）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">person_t</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">/* 4 */</span>    <span class="token keyword">short</span> age<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">/* 8 */</span>    <span class="token keyword">char</span> gender<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理论上结构体 <code>struct person_t</code> 的内存分配的大小为 <code>4 + 2 + 8 + 1 = 15</code>，实际为 <code>24</code>。这是因为实际分配内存时，在 <code>age</code> 和 <code>name</code> 之间填充（Padding）了 2 字节大小的空间，在 <code>gender</code> 后填充了 7 字节大小的空间。</p><p>既然如此，实际当中我们是可以利用这一特性对程序进行内存级别的优化，以减小对内存的占用。例如，针对上面的结构体，可以通过调整结构体中的成员变量的顺序以达到减小内存的目的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">person_t</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">/* 4 */</span>    <span class="token keyword">short</span> age<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span>    <span class="token keyword">char</span> gender<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">/* 8 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，将只在 <code>gender</code> 和 <code>name</code> 之间填充 1 字节的空间，从而使整个结构体占用的内存空间减小到 16 字节。这在实际应用当中是极为可观的。</p><p>因此，对结构体成员变量的定义顺序，一般都遵循着按<a href="https://en.wikipedia.org/wiki/Data_structure_alignment#Typical_alignment_of_C_structs_on_x86">对齐长度</a>从小到大或从大到小的规则排列。</p><p>那么，在其他的面向对象的语言里是否也会发生内存对齐？</p><p>以 C# 为例，我分别对值类型（存栈上）的 <code>struct</code> 实例和引用类型（引用存栈上，数据存堆上）的 <code>class</code> 实例进行内存大小检测。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">short</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">char</span></span> Gender <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使布局连续以支持 Marshal.SizeOf 调用</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">short</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">char</span></span> Gender <span class="token punctuation">&#123;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Marshal<span class="token punctuation">.</span><span class="token function">SizeOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Marshal<span class="token punctuation">.</span><span class="token function">SizeOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 24</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示，未作优化 <code>Bar</code> 类实例的内存占用高于 <code>Foo</code> 结构体实例。但需要注意的是，实际开发中，对类实例的内存对齐优化将交由 .NET 平台来完成。同理，在 JVM 中也是如此。</p><h2 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h2><p>这里讲的栈和堆指的是内存模型，而不是数据结构，虽然它们彼此具有相似的特性。在 C 中，存储区主要分为栈区、堆区、数据区和代码区。</p><p>在内存中，堆区位于内存的底部（低地址区），而栈区位于内存的顶部（高地址区）。</p><p>对一个程序来说，每个子程序（即函数）根据都会在内存中分配一个栈桢（Stack Frame），这些栈桢将会组成一个<a href="https://en.wikipedia.org/wiki/Call_stack">调用栈</a>（Call Stack）。栈桢的内存分配是根据彼此之间的调用关系，从栈区的顶部向低地址区进行分配的。栈桢的内存在到它调用完成后就被释放回收。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sub2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> baz <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sub1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sub2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">sub1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上述程序，将在内存中形成如下图所示的栈桢。<code>main</code> 函数将首先分配栈桢，之后依次是 <code>sub1</code>、<code>sub2</code>；然后当 <code>sub2</code> 调用结束后，其内存将会被立刻回收，之后回到 <code>sub1</code> 中继续执行，并最终回到 <code>main</code> 函数中，直到结束整个调用。这其实可以说是对栈的特性 LIFO（后进先出） 的一种应用。</p><img src="/2019/05/24/clang-notes/3.png" class="" title="图 3"><p>当然，对于每个栈桢内部而言，将对函数的参数列表、返回地址、局部变量等，按内存地址由低向高的顺序进行分配。这与堆区的内存分配是相同的。</p><p>堆的生存期是跟随整个程序进程的，而栈是函数运行时（Runtime）的。</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程（Process）是操作系统的基本组成部分，是系统资源分配的基本单位——但在现在的多数面向线程（Thread）设计的操作系统（如 Linux 2.4 及更新版本）中，进程只不过是真正执行实体——线程——的容器，其本身只包含指令、数据及其组织形式的描述。即使说，进程实际上就是个<a href="https://en.wikipedia.org/wiki/File_descriptor">文件描述者</a>（File Descriptor）或文件句柄（File Handle），它的值是一个无符号的长整型数字，它最终将索引到一个具体的文件上去（如图 4）。</p><img src="/2019/05/24/clang-notes/5.svg" class="" title="File_table_and_inode_table"><p>对于一个 CPU 而言，进程的处理是每个时刻只能处理一个进程的任务，但进程却是可以同时存在的。CPU 通过进行进程上下文的快速切换（时间极快）来实现同时执行的效果。线程的并行执行实际也是依赖于 CPU 对线程上下文的快速切换，当然对于多核 CPU 而言，可以将其分配到不同的内核进行处理。</p><img src="/2019/05/24/clang-notes/6.svg" alt="Multithreaded_process" width="240"><p>每一个进程的资源是独立分配的，它们相互之间是无法直接访问的。同一进程内的线程共享进程的资源。</p><p>在 Linux 系统中，对进程的管理有两个特殊的函数： <code>fork()</code> 和 <code>vfork()</code>。前者创建一个子进程，后者创建一个阻塞（Block）父进程的子进程。这两个函数会造成进程发生像细胞一样的分裂，且每次子进程都会继承父进程的资源，并自分裂处继续执行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, my pid is %d.\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的代码可能的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, my pid is <span class="token number">22715</span>.Hello, my pid is <span class="token number">0</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 C 中进行线程编程使用的接口是 POSIX 或 Pthreads，这是由 <a href="http://www.unix.org/version3/ieee_std.html">IEEE POSIX 1003.1c</a> 标准进行规定的。利用 <code>pthread.h</code> 头文件可以实现对线程的基本管理。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">print_hello</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> tid<span class="token punctuation">;</span>    tid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span> <span class="token comment">/* 获取线程 ID */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread #%ld: Hello World!\n"</span><span class="token punctuation">,</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> thread<span class="token punctuation">;</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token keyword">long</span> tid<span class="token punctuation">;</span>    tid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* 指定一个线程 ID */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In main: creating a thread %ld\n"</span><span class="token punctuation">,</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> print_hello<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: code from pthread_create() is %d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Last thing that main() should do */</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译时，需要使用 <code>-lpthread</code> 进行链接。</p><h2 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h2><p>套接字是一种特殊的文件。为解决进程间的通讯而生。</p><img src="/2019/05/24/clang-notes/4.png" class="" title="图 5"><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>Blaise Barney, Lawrence Livermore National Laboratory. <em><a href="https://computing.llnl.gov/tutorials/pthreads/">POSIX Threads Programming</a></em></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>原生 AJAX 技术在 .NET 环境中的应用</title>
    <link href="https://jin.cloong.me/2018/02/01/ajax-dotnet/"/>
    <id>https://jin.cloong.me/2018/02/01/ajax-dotnet/</id>
    <published>2018-02-01T09:38:02.000Z</published>
    <updated>2021-03-03T13:32:47.100Z</updated>
    
    <content type="html"><![CDATA[<p>这学期首次接触 .NET 开发，个中遇到了许多的问题。其中，以原生 AJAX 异步请求数据的相关问题最是让我困扰。所以，利用空闲时间好好研究了一下。</p><h2 id="AJAX-的封装"><a href="#AJAX-的封装" class="headerlink" title="AJAX 的封装"></a>AJAX 的封装</h2><p>首先，我简单地将 AJAX 封装了一下（使用 ES6 标准）。</p><a id="more"></a><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @desc AJAX 的简单封装 * @param &#123;String&#125; url 请求路径  * @param &#123;Object&#125; settings 参数配置 * @returns &#123;Promise&#125; 包含数据的 Promise 对象 */</span><span class="token keyword">const</span> <span class="token function-variable function">ajax</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// set default values</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>     method <span class="token operator">=</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>     responseType <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>     isAsync <span class="token operator">=</span> <span class="token boolean">true</span>     data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>  <span class="token comment">// get XMLHttpRequest object</span>  <span class="token keyword">let</span> <span class="token function-variable function">getXhr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// use to format response data </span>  <span class="token keyword">class</span> <span class="token class-name">DataFormator</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">getJson</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> __data <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">===</span> <span class="token string">'object'</span>        <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data        <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> __data <span class="token operator">===</span> <span class="token keyword">null</span>        <span class="token operator">?</span> __data        <span class="token operator">:</span> <span class="token punctuation">(</span>__data<span class="token punctuation">.</span>d <span class="token operator">&amp;&amp;</span> __data<span class="token punctuation">.</span>d <span class="token operator">!==</span> <span class="token string">''</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>__data<span class="token punctuation">.</span>d<span class="token punctuation">)</span> <span class="token operator">:</span> __data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">getText</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// add other format function here </span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token function">getXhr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> isAsync<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span>        <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataFormator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> responseType<span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>    <span class="token comment">// set request header</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> header<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> header<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主要应用了 Promise 对象对 AJAX 进行封装，使用起来较为简单：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 方式一</span><span class="token comment">// 默认使用 GET 请求</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// or getText</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* code here ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* code here ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> settings<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// or getText</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* code here ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* code here ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-WEB-FORMS-中"><a href="#在-WEB-FORMS-中" class="headerlink" title="在 WEB FORMS 中"></a>在 WEB FORMS 中</h2><p>在 ASP.NET Web Forms 中，虽然微软已经封装了一些 AJAX 控件（比如：UpdatePanel），并且在处理一些简单的业务时，已经可以满足要求，然而在处理复杂的业务时，这些控件就不显得那么便捷了，甚至可能出现一些问题。这个时候我们迫切需要一种方法：让我们在前台的 js 代码中使用 AJAX 方法向服务器来发送异步请求，然后服务器响应请求、发送数据，接着在客服端接收数剧并对其处理。那么如何实现呢？</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>新建一个 ASP.NET Web Forms 空网站，添加 2 个 Web 窗体页面（如：Client.aspx、Server.aspx）。</p><p>Client.aspx</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span> <span class="token attr-name">runat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>server<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>test btn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/ajax.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'Server.aspx'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Server.aspx.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Page_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Response<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Chrome 浏览器运行结果：</p><img src="/2018/02/01/ajax-dotnet/first-way-1.png" class="" title="first-way-1"><p>当然，我们也可以传递传参：</p><p>Client.aspx</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'Server.aspx?id=1'</span><span class="token punctuation">)</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Server.aspx.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Page_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">GetDataById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetDataById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name"><span class="token keyword">string</span></span> id <span class="token operator">=</span> Request<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"ID"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  Response<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Chrome 浏览器运行结果：</p><img src="/2018/02/01/ajax-dotnet/first-way-2.png" class="" title="first-way-2"><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用 <code>Web Service</code> 属性来编写服务端代码。新建一个 ASP.NET Web Forms 空网站，添加 1 个 Web 窗体页面（如：Index.aspx）。</p><p>Index.aspx</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'Index.aspx/GetData'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>      header<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Index.aspx.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>WebMethod</span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">String</span> <span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"Hello Ajax, I am from server!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 Chrome 浏览器运行结果：</p><img src="/2018/02/01/ajax-dotnet/second-way-1.png" class="" title="second-way-1"><p>当然，也可以传参：</p><p>Index.aspx</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'Index.apsx/GetDataById'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  header<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Index.aspx.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>WebMethod</span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">String</span> <span class="token function">GetDataById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"&#123;\"id\": \""</span> <span class="token operator">+</span> id <span class="token operator">+</span><span class="token string">"\"&#125;"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 Chrome 浏览器运行结果：</p><img src="/2018/02/01/ajax-dotnet/second-way-2.png" class="" title="second-way-2"><p>在实际开发中，服务器端要对数据进行序列化（比如 JSON 序列化），这样才能使前端开发变得更便捷。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这学期首次接触 .NET 开发，个中遇到了许多的问题。其中，以原生 AJAX 异步请求数据的相关问题最是让我困扰。所以，利用空闲时间好好研究了一下。&lt;/p&gt;
&lt;h2 id=&quot;AJAX-的封装&quot;&gt;&lt;a href=&quot;#AJAX-的封装&quot; class=&quot;headerlink&quot; title=&quot;AJAX 的封装&quot;&gt;&lt;/a&gt;AJAX 的封装&lt;/h2&gt;&lt;p&gt;首先，我简单地将 AJAX 封装了一下（使用 ES6 标准）。&lt;/p&gt;</summary>
    
    
    
    <category term="技术水文" scheme="https://jin.cloong.me/categories/%E6%8A%80%E6%9C%AF%E6%B0%B4%E6%96%87/"/>
    
    
    <category term="AJAX" scheme="https://jin.cloong.me/tags/AJAX/"/>
    
    <category term=".NET" scheme="https://jin.cloong.me/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我写的第一个游戏：西瓜棋</title>
    <link href="https://jin.cloong.me/2017/06/17/talk-wchess/"/>
    <id>https://jin.cloong.me/2017/06/17/talk-wchess/</id>
    <published>2017-06-17T14:40:59.000Z</published>
    <updated>2021-03-03T13:32:47.116Z</updated>
    
    <content type="html"><![CDATA[<p>打算写这个游戏的想法不是“蓄谋已久”的，它不过是为了完成作业而作出来的产物。虽然到目前为止，它还有许多的不足，但至少没有“胎死腹中”。（有兴趣的朋友可以下来玩玩：<a href="https://github.com/tatwd/watermelon-chess/raw/master/wiki-resources/downloads/watermelon-chess-1.6.1-install.exe">点我下载</a>）</p><img src="/2017/06/17/talk-wchess/talk-wchess-0.png" class="" title="talk-wchess-0"><p>这种棋，是我小时候经常玩的，玩法大多是就地取材：在地上画个棋盘，以石头或树叶或树枝什么的为棋子，各6个。规则很简单：石头剪刀布决定谁现在走，每人轮流走一步，将对方棋子围死即可拿走，一方棋子数小于3个即输。像这类的棋，我小时候还玩过许多。</p><p>刚开始，我设想这游戏有两种模式：单机模式、联机模式。如果要实现话，得完成以下几步：<code>1)棋盘及棋子的绘制；2)实现人走棋；3)实现吃棋；4)实现悔棋、认输、和棋等 功能；5)实现电脑走棋。</code>本来还想实现联机模式的，后来发现还是留到以后再说吧。</p><h2 id="界面绘制"><a href="#界面绘制" class="headerlink" title="界面绘制"></a>界面绘制</h2><a id="more"></a><p>我首先遇到的第一个问题是怎样方便快捷地实现图形界面的绘制，即棋盘棋子的绘制。在此之前，我没有一点的窗体编程的经验，也不清楚用那种语言来开发更合理，没办法我只能找度娘、看大神的经验之谈了。最终，我选择了<code>C++</code>和<code>Qt</code>。在选工具时，本来想选Visual Studio 2013的，后来发现它的内库不太方便（好吧，其实是我看不太懂），所以就放弃了，选了Qt。</p><p>Qt的绘图相对较简单。创建一个Qt Widgets Application应用，在实现类（如：Board类）中的绘图事件paintEvent中，用QPainter创建一个画笔对象，然后用这个对象去调用它的成员函数来绘制图形即可。如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Board.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPainter></span></span><span class="token keyword">void</span> <span class="token class-name">Board</span><span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  QPainter <span class="token function">painter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//创建画笔对象</span>  painter<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//画圆，传入圆心坐标、长轴、短轴</span>  painter<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//画线，传入直线的起点、终点坐标</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选坐标系"><a href="#选坐标系" class="headerlink" title="选坐标系"></a>选坐标系</h2><p>然而，在绘制棋子时，我又遇到了一个严重的问题：坐标系的选择。刚开始，我用的是直角坐标系，发现能够把所有棋子都绘制出来，但棋子的遍历（包括棋盘上所点的遍历）却成了一个极大的问题。如果不解决话，后面的走棋、吃棋等都无法实现或者说很难实现。这个问题一度让我写不下去了（停了一个多礼拜）。后来突然有一天，脑子一抽，发现我的棋盘是一个关于中心对称的圆形啊，为什么不能用极坐标系呢？以棋盘中心为原点，只需要一个<code>极径</code>和一个<code>极角</code>就能确定棋盘上所有的点。</p><img src="/2017/06/17/talk-wchess/talk-wchess-1.png" class="" title="talk-wchess-1"><p>于是乎，遍历问题便不难了:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/*获取棋盘上点的极坐标*/</span><span class="token keyword">void</span> <span class="token class-name">Board</span><span class="token operator">::</span><span class="token function">getAROfBoard</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>angle<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pos<span class="token operator">&lt;=</span><span class="token number">11</span><span class="token punctuation">)</span>       <span class="token comment">//第0~11个点，即第1圈</span>  <span class="token punctuation">&#123;</span>    angle <span class="token operator">=</span> pos<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> _R<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">>=</span><span class="token number">12</span> <span class="token operator">&amp;&amp;</span> pos<span class="token operator">&lt;=</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token comment">//第12~19个点，即第2、3圈</span>  <span class="token punctuation">&#123;</span>    angle <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">90</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> _R<span class="token operator">*</span><span class="token number">13</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span><span class="token number">15</span><span class="token punctuation">)</span>      r <span class="token operator">=</span> _R<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//中心点（即第4圈）为(0, 0)</span><span class="token punctuation">&#125;</span><span class="token comment">/*遍历棋盘所有的点并返回该点pos的像素坐标*/</span>QPoint <span class="token class-name">Board</span><span class="token operator">::</span><span class="token function">getPointOfBoard</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>angle<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  QPoint <span class="token function">bCenter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//棋盘中心坐标</span>  <span class="token function">getAROfBoard</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> angle<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取该点的极坐标</span>  <span class="token keyword">return</span> <span class="token function">polarCoordToXY</span><span class="token punctuation">(</span>bCenter<span class="token punctuation">,</span> angle<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将极坐标转成像素坐标</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="死子判断"><a href="#死子判断" class="headerlink" title="死子判断"></a>死子判断</h2><p>在解决了这个问题之后，我又迎来了第3个大问题：死子判断。虽然利用下面的算法完成了对单个棋子的死活判断，但没有实现对多个棋子的判断（目前还未去解决，待解决）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/*获取棋子被围数*/</span><span class="token keyword">int</span> <span class="token class-name">Board</span><span class="token operator">::</span><span class="token function">getSurroundStone</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  QPoint sCenter <span class="token operator">=</span> <span class="token function">polarCoordToXY</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取该子的像素坐标</span>  <span class="token keyword">int</span> d <span class="token operator">=</span> _R<span class="token operator">*</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_dead<span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    QPoint iCenter <span class="token operator">=</span> <span class="token function">polarCoordToXY</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dx <span class="token operator">=</span> sCenter<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> iCenter<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dy <span class="token operator">=</span> sCenter<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> iCenter<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//被对手棋子全包围时</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dx<span class="token operator">*</span>dx <span class="token operator">+</span> dy<span class="token operator">*</span>dy<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>dx<span class="token operator">*</span>dx <span class="token operator">+</span> dy<span class="token operator">*</span>dy<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> d<span class="token operator">*</span>d <span class="token operator">&amp;&amp;</span> _s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_black <span class="token operator">!=</span> _s<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>_black<span class="token punctuation">)</span>       n<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，当单个棋子被对手棋子全包围时，它会判断为死子，然后“消失”；但是，2个或2个以上的情况不会。</p><img src="/2017/06/17/talk-wchess/talk-wchess-2.png" class="" title="talk-wchess-2"><h2 id="电脑走棋"><a href="#电脑走棋" class="headerlink" title="电脑走棋"></a>电脑走棋</h2><p>电脑走棋方面，我使用的较为简单，大概相当于三岁小孩的水平，更深层次的还没有研究过。本来打算使用最近比较火的机器学习（Machine Learning, ML），我研究一段时间后，还是老老实实地用简单的吧。具体实现：先获取所有可能走法存入一个数组，然后对其中的每一步进行假想走棋并评估该走法的价值，最终得到一个最佳走法，从而使电脑来走。其中，价值评估算法（最小最大值算法）较为简陋，简单讲，就是被对手围的越少的走法，价值越高。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*电脑走棋*/</span><span class="token keyword">void</span> <span class="token class-name">SingleGame</span><span class="token operator">::</span><span class="token function">computerMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Step<span class="token operator">*</span> step <span class="token operator">=</span> <span class="token function">getBestStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取最佳走法</span>  <span class="token function">moveStone</span><span class="token punctuation">(</span>step<span class="token operator">-></span>_movedId<span class="token punctuation">,</span> step<span class="token operator">-></span>_killId<span class="token punctuation">,</span> step<span class="token operator">-></span>_angleTo<span class="token punctuation">,</span> step<span class="token operator">-></span>_rTo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//走棋</span>  <span class="token class-name">Board</span><span class="token operator">::</span><span class="token function">movePromptInStatusBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//落子提示</span>  <span class="token keyword">delete</span> step<span class="token punctuation">;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*获取最佳走法*/</span>Step<span class="token operator">*</span> <span class="token class-name">SingleGame</span><span class="token operator">::</span><span class="token function">getBestStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  QVector<span class="token operator">&lt;</span>Step <span class="token operator">*</span><span class="token operator">></span> steps<span class="token punctuation">;</span>  <span class="token function">getAllPossibleMove</span><span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> maxScore <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100000</span><span class="token punctuation">;</span>  Step<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>steps<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    Step<span class="token operator">*</span> step <span class="token operator">=</span> steps<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    steps<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fakeMove</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//假想走棋</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token function">getMinScore</span><span class="token punctuation">(</span>_level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> maxScore<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最小分</span>    <span class="token function">unfakeMove</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//恢复</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">></span> maxScore<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      maxScore <span class="token operator">=</span> score<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>        <span class="token keyword">delete</span> ret<span class="token punctuation">;</span>      ret <span class="token operator">=</span> step<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">delete</span> step<span class="token punctuation">;</span> <span class="token comment">//防止内存泄漏</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总而言之，从预期来说，大部分功能已经实现，目前还未解决的问题还有两个：1)死子判断算法的完善；2)价值评估算法的优化。以后有可能的话，希望能实现联机模式，但到底可不可能，谁知道呢？</p><blockquote><p>项目源代码： <a href="https://github.com/tatwd/watermelon-chess/tree/master/source">https://github.com/tatwd/watermelon-chess/tree/master/source</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;打算写这个游戏的想法不是“蓄谋已久”的，它不过是为了完成作业而作出来的产物。虽然到目前为止，它还有许多的不足，但至少没有“胎死腹中”。（有兴趣的朋友可以下来玩玩：&lt;a href=&quot;https://github.com/tatwd/watermelon-chess/raw/master/wiki-resources/downloads/watermelon-chess-1.6.1-install.exe&quot;&gt;点我下载&lt;/a&gt;）&lt;/p&gt;
&lt;img src=&quot;/2017/06/17/talk-wchess/talk-wchess-0.png&quot; class=&quot;&quot; title=&quot;talk-wchess-0&quot;&gt;

&lt;p&gt;这种棋，是我小时候经常玩的，玩法大多是就地取材：在地上画个棋盘，以石头或树叶或树枝什么的为棋子，各6个。规则很简单：石头剪刀布决定谁现在走，每人轮流走一步，将对方棋子围死即可拿走，一方棋子数小于3个即输。像这类的棋，我小时候还玩过许多。&lt;/p&gt;
&lt;p&gt;刚开始，我设想这游戏有两种模式：单机模式、联机模式。如果要实现话，得完成以下几步：&lt;code&gt;1)棋盘及棋子的绘制；2)实现人走棋；3)实现吃棋；4)实现悔棋、认输、和棋等 功能；5)实现电脑走棋。&lt;/code&gt;本来还想实现联机模式的，后来发现还是留到以后再说吧。&lt;/p&gt;
&lt;h2 id=&quot;界面绘制&quot;&gt;&lt;a href=&quot;#界面绘制&quot; class=&quot;headerlink&quot; title=&quot;界面绘制&quot;&gt;&lt;/a&gt;界面绘制&lt;/h2&gt;</summary>
    
    
    
    <category term="技术水文" scheme="https://jin.cloong.me/categories/%E6%8A%80%E6%9C%AF%E6%B0%B4%E6%96%87/"/>
    
    
    <category term="C++" scheme="https://jin.cloong.me/tags/C/"/>
    
    <category term="watermelon-chess" scheme="https://jin.cloong.me/tags/watermelon-chess/"/>
    
    <category term="Qt" scheme="https://jin.cloong.me/tags/Qt/"/>
    
    <category term="Game" scheme="https://jin.cloong.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>利用 Hexo 框架在 GitHub 上搭建静态个人博客网站</title>
    <link href="https://jin.cloong.me/2017/06/14/build-hexo-blog/"/>
    <id>https://jin.cloong.me/2017/06/14/build-hexo-blog/</id>
    <published>2017-06-14T11:18:31.000Z</published>
    <updated>2021-03-03T13:32:47.100Z</updated>
    
    <content type="html"><![CDATA[<p>本文是我建立这个博客的一些笔记。目的有三：一防忘记，二供参考，三作开篇。</p><img src="/2017/06/14/build-hexo-blog/build-hexo-blog.jpg" class="" title="bulid-hexo-blog"><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，先安装建立 Hexo 博客站点的依赖环境，即安装 Node.js、Git 以及在 GitHub 上建立站点仓库。</p><a id="more"></a><h3 id="安装Node-js环境"><a href="#安装Node-js环境" class="headerlink" title="安装Node.js环境"></a>安装Node.js环境</h3><p>参考文章：<a href="http://www.w3cschool.cn/nodejs/nodejs-install-setup.html">W3Cschool 上 Node.js 教程之 Node.js 安装配置</a>。</p><blockquote><p>后面要使用其中的包管理工具<code>npm</code>进行 Hexo 安装。</p></blockquote><h3 id="安装Git工具包"><a href="#安装Git工具包" class="headerlink" title="安装Git工具包"></a>安装Git工具包</h3><p>参考文章：<a href="http://www.w3cschool.cn/git/git-install-setup.html">W3Cschool 上 Git 教程之 Git 安装配置</a>。</p><h3 id="GitHub-上建立站点仓库"><a href="#GitHub-上建立站点仓库" class="headerlink" title="GitHub 上建立站点仓库"></a>GitHub 上建立站点仓库</h3><p>1、如果没有 GitHub 账户，先用邮箱在 <a href="https://github.com/">Github</a> 免费注册一个账户；<br>2、创建一个仓库（repository），将其命名：<code>username.github.io</code>（username：账户名），比如：tatwd.github.io。</p><img src="/2017/06/14/build-hexo-blog/new-site-repository.png" class="" title="new-site-repository"><blockquote><p>后面的站点就是部署在这个仓库（即<code>站点仓库</code>）上，以后访问博客只需在 URL 上输入<code>https://username.github.io</code>即可。</p></blockquote><h2 id="本地建站"><a href="#本地建站" class="headerlink" title="本地建站"></a>本地建站</h2><p>准备工作完成后，便可以开始建立站点了。在 windows 环境下，启动命令行 cmd（Linux 环境启动终端），任意选择一个文件夹用来建立站点，然后输入命令：</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化-Hexo-站点"><a href="#初始化-Hexo-站点" class="headerlink" title="初始化 Hexo 站点"></a>初始化 Hexo 站点</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token punctuation">[</span>site-name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>site-name： 站点文件夹名，可有可无。若加，则会在当前文件夹下新建一个以 site-name 命名的文件夹（即<code>站点文件夹</code>）。比如：输入<code>hexo init blog</code>后，当前文件夹会有一个叫<code>blog</code>文件夹。</p></blockquote><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>site-name<span class="token punctuation">]</span>   <span class="token comment">#进入站点文件夹，如果在上步新建了站点文件夹</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="本地启动站点"><a href="#本地启动站点" class="headerlink" title="本地启动站点"></a>本地启动站点</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate  <span class="token comment">#可简写：hexo g，此命令会生成一个 public 文件夹</span>hexo server    <span class="token comment">#可简写：hexo s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此，本地站点建立完毕。在浏览器的 URL 中输入<code>http://localhost:4000</code>即可查看站点。</p><blockquote><p>按<code>Ctrl+C</code>键关闭，再次启动要先输入<code>hexo clean</code>清理缓存（即 public 文件夹)，之后如上。</p></blockquote><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>法一：在 Hexo 官方网站上<a href="https://hexo.io/themes/">下载</a>，然后解压到<code>站点文件夹</code>下的<code>themes</code>文件夹下，注意命名。</p><p>法二：使用<code>git clone [主题的 GitHub 仓库]</code>命令，将其克隆到<code>themes</code>文件夹下即可，注意命名。注意，此时整个项目将包含两个 Git 仓库，需要将主题仓库改成子仓库 <code>submodule</code> 或删除主题仓库的 <code>.git</code> 文件夹。 </p><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><p>修改站点文件夹下的<code>_config.yml</code>（以下称之为<code>主站配置文件</code>）：把<code>theme: landscape</code>改为<code>theme: 主题文件夹名</code>。</p><blockquote><p>注意在<code>:</code>之后有一个空格。</p></blockquote><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>不同主题参见该主题的使用文档即可。</p><h2 id="网上部署"><a href="#网上部署" class="headerlink" title="网上部署"></a>网上部署</h2><p>在 GitHub 上部署站点：</p><h3 id="修改主站配置文件"><a href="#修改主站配置文件" class="headerlink" title="修改主站配置文件"></a>修改主站配置文件</h3><p>修改处前：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Deployment# Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改处后：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Deployment# Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type: git  repo: git@github.com:tatwd&#x2F;username.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意在<code>:</code>之后有一个空格，<code>username</code>改为你的用户名，以下同。</p></blockquote><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>如果在本地已启动了站点，则先关闭，然后输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git  <span class="token comment">#很重要</span>hexo cleanhexo g       <span class="token comment">#hexo generate的简写</span>hexo deploy  <span class="token comment">#可简写：hexo d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>至此，网上部署完毕，在浏览器的 URL 中输入<code>https://username.github.io</code>验证是否成功。</p><blockquote><p>后两条命令可合写为： <code>hexo g -d</code></p></blockquote><h2 id="简单管理"><a href="#简单管理" class="headerlink" title="简单管理"></a>简单管理</h2><h3 id="平常写作"><a href="#平常写作" class="headerlink" title="平常写作"></a>平常写作</h3><p>进入站点文件夹，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写完（Markdown 语言写作，参考文章：<a href="http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a>）之后保存，然后输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时，所写文章便被部署到 GitHub 上去了。</p><blockquote><p>layout 的值：page\post\draft，默认为 post，详见 <a href="https://hexo.io/zh-cn/docs/writing.html">Hexo 文档之写作</a>。</p></blockquote><h3 id="管理站点文件"><a href="#管理站点文件" class="headerlink" title="管理站点文件"></a>管理站点文件</h3><p>如果本地站点文件丢失了或换了电脑怎么办？为解决这个问题，我们利用了 GitHub 的多分支来管理站点文件：</p><p>1、用<code>master</code>分支来管理发布的文件，即<code>public</code>文件夹下的文件；<br>2、用<code>hexo</code>分支来管理主站点文件，即除<code>public</code>下和<code>.gitignore</code>忽视的其他文件；<br>3、将<code>hexo</code>设为默认分支。</p><p>为此，我们要：</p><h4 id="建立远程仓库"><a href="#建立远程仓库" class="headerlink" title="建立远程仓库"></a>建立远程仓库</h4><p>先将远程仓库关联到本地。进入站点文件夹，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:username/username.github.io.git<span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>参考文章：<a href="http://www.w3cschool.cn/git/git-remote-repo.html">W3Cschool 上 Git 教程之 Git 远程仓库</a>。</p></blockquote><h4 id="创建-hexo-分支"><a href="#创建-hexo-分支" class="headerlink" title="创建 hexo 分支"></a>创建 hexo 分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b hexo  <span class="token comment">#创建并切换到 hexo 分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将-hexo-设为默认分支"><a href="#将-hexo-设为默认分支" class="headerlink" title="将 hexo 设为默认分支"></a>将 hexo 设为默认分支</h4><p>在 GitHub 上的站点仓库上，点击<code>Settings</code>=&gt;<code>Branches</code>，将 Default branch 切换成 hexo，然后点击<code>Update</code>即可。</p><img src="/2017/06/14/build-hexo-blog/set-default-branch.png" class="" title="set-default-branch"><h4 id="将主站点文件-push-到-hexo-分支"><a href="#将主站点文件-push-到-hexo-分支" class="headerlink" title="将主站点文件 push 到 hexo 分支"></a>将主站点文件 push 到 hexo 分支</h4><p>切换到 hexo 分支（使用<code>git branch</code>命令查看当前所在分支）下，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"提交记录"</span><span class="token function">git</span> push -u origin hexo  <span class="token comment">#初次push要加-u，此后可省</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>输命令之前，查看<code>站点文件夹</code>下的<code>.gitignore</code>文件，是否忽略 public 文件夹，若无，则添加<code>public/</code>。另外，此方法在<code>下载主题</code>使用<code>法二</code>时似乎有bug。</p></blockquote><h3 id="本地站点恢复"><a href="#本地站点恢复" class="headerlink" title="本地站点恢复"></a>本地站点恢复</h3><p>1、使用<code>git clone</code>命令克隆<code>站点仓库</code>（默认分支为hexo）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:username/username.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、在本地新拷贝的<code>username.github.io</code>文件夹下依次执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意，此时不需要执行<code>hexo init</code>这条命令。</p></blockquote><p>到此，便完成了对站点的一些简单管理。</p><h3 id="关于域名配置的问题"><a href="#关于域名配置的问题" class="headerlink" title="关于域名配置的问题"></a>关于域名配置的问题</h3><p>在 GitHub 上，站点仓库是支持域名配置的。具体见参考链接，这里需要注意的是，之前看到有人采用的是在域名提供商的后台通过添加 A 记录的方式进行配置的，这在 GitHub 上会被提示警告，建议改成通过添加 CNAME 记录进行配置。</p><blockquote><p>参考：<a href="https://docs.github.com/cn/free-pro-team@latest/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">配置 GitHub Pages 站点的自定义域</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是我建立这个博客的一些笔记。目的有三：一防忘记，二供参考，三作开篇。&lt;/p&gt;
&lt;img src=&quot;/2017/06/14/build-hexo-blog/build-hexo-blog.jpg&quot; class=&quot;&quot; title=&quot;bulid-hexo-blog&quot;&gt;

&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;首先，先安装建立 Hexo 博客站点的依赖环境，即安装 Node.js、Git 以及在 GitHub 上建立站点仓库。&lt;/p&gt;</summary>
    
    
    
    <category term="建站笔记" scheme="https://jin.cloong.me/categories/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hexo" scheme="https://jin.cloong.me/tags/Hexo/"/>
    
    <category term="Blog" scheme="https://jin.cloong.me/tags/Blog/"/>
    
    <category term="GitHub" scheme="https://jin.cloong.me/tags/GitHub/"/>
    
  </entry>
  
</feed>
